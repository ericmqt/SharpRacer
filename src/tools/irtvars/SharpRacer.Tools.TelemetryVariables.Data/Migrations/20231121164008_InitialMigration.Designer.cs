// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SharpRacer.Tools.TelemetryVariables.Data;

#nullable disable

namespace SharpRacer.Tools.TelemetryVariables.Data.Migrations
{
    [DbContext(typeof(TelemetryVariablesDbContext))]
    [Migration("20231121164008_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.0");

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.CarEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Name")
                        .HasColumnOrder(2);

                    b.Property<string>("NormalizedPath")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("NormalizedPath")
                        .HasColumnOrder(4);

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Path")
                        .HasColumnOrder(1);

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("ShortName")
                        .HasColumnOrder(3);

                    b.HasKey("Id");

                    b.HasAlternateKey("NormalizedPath")
                        .HasName("AK_Car_NormalizedPath");

                    b.HasIndex("NormalizedPath")
                        .IsUnique()
                        .HasDatabaseName("AK_Car_NormalizedPath");

                    b.ToTable("Car", (string)null);
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.CarVariableEntity", b =>
                {
                    b.Property<int>("CarKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("CarKey")
                        .HasColumnOrder(0);

                    b.Property<int>("VariableKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VariableKey")
                        .HasColumnOrder(1);

                    b.HasKey("CarKey", "VariableKey");

                    b.HasIndex("VariableKey");

                    b.ToTable("CarVariable", (string)null);
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.SessionVariableEntity", b =>
                {
                    b.Property<int>("VariableKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("VariableKey");

                    b.HasIndex("VariableKey")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.ToView("SessionVariables", (string)null);
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.VariableEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER")
                        .HasColumnName("Id")
                        .HasColumnOrder(0);

                    b.Property<int?>("DeprecatingVariableKey")
                        .HasColumnType("INTEGER")
                        .HasColumnName("DeprecatingVariableKey")
                        .HasColumnOrder(9);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT")
                        .HasColumnName("Description")
                        .HasColumnOrder(7);

                    b.Property<bool>("IsDeprecated")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsDeprecated")
                        .HasColumnOrder(8);

                    b.Property<bool>("IsTimeSliceArray")
                        .HasColumnType("INTEGER")
                        .HasColumnName("IsTimeSliceArray")
                        .HasColumnOrder(6);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("Name")
                        .HasColumnOrder(1);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("NormalizedName")
                        .HasColumnOrder(2);

                    b.Property<int>("ValueCount")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ValueCount")
                        .HasColumnOrder(5);

                    b.Property<int>("ValueType")
                        .HasColumnType("INTEGER")
                        .HasColumnName("ValueType")
                        .HasColumnOrder(3);

                    b.Property<string>("ValueUnit")
                        .HasMaxLength(32)
                        .HasColumnType("TEXT")
                        .HasColumnName("ValueUnit")
                        .HasColumnOrder(4);

                    b.HasKey("Id");

                    b.HasAlternateKey("NormalizedName")
                        .HasName("AK_Variable_NormalizedName");

                    b.HasIndex("DeprecatingVariableKey");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("AK_Variable_NormalizedName");

                    b.ToTable("Variable", (string)null);
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.CarVariableEntity", b =>
                {
                    b.HasOne("SharpRacer.Tools.TelemetryVariables.Data.Entities.CarEntity", "Car")
                        .WithMany()
                        .HasForeignKey("CarKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarVariable_Car");

                    b.HasOne("SharpRacer.Tools.TelemetryVariables.Data.Entities.VariableEntity", "Variable")
                        .WithMany()
                        .HasForeignKey("VariableKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CarVariable_Variable");

                    b.Navigation("Car");

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.SessionVariableEntity", b =>
                {
                    b.HasOne("SharpRacer.Tools.TelemetryVariables.Data.Entities.VariableEntity", "Variable")
                        .WithOne()
                        .HasForeignKey("SharpRacer.Tools.TelemetryVariables.Data.Entities.SessionVariableEntity", "VariableKey")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Variable");
                });

            modelBuilder.Entity("SharpRacer.Tools.TelemetryVariables.Data.Entities.VariableEntity", b =>
                {
                    b.HasOne("SharpRacer.Tools.TelemetryVariables.Data.Entities.VariableEntity", "DeprecatingVariable")
                        .WithMany()
                        .HasForeignKey("DeprecatingVariableKey")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Variable_DeprecatingVariable");

                    b.Navigation("DeprecatingVariable");
                });
#pragma warning restore 612, 618
        }
    }
}
